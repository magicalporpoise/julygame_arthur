<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hitbox_jab</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hit boxes apply damage and stun to those who dont match teams

// how big (applied to image scales
length = 1.0;
girth  = 1.0;

// alliance
alliance_id = 0;

// damage + knockback? + stun?
damage = 1;

//moving?
my_move_speed = 0;
my_owner = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CHECK FOR HITTABLES

//check
//if(place_meeting(x, y, obj_hittable)){
    //var x1 = x + lengthdir_x(x, image_angle);
    //var y1 = y-sprite_height/2 + lengthdir_y(y-sprite_height/2, image_angle);
    //var x2 = x+sprite_width + lengthdir_x(x+sprite_width, image_angle);
    //var y2 = y+sprite_height/2 + lengthdir_y(y+sprite_height/2, image_angle);
    
    var those_colliding = place_meeting_list(self, obj_hittable);
 
    //TESTING
    //draw_rectangle(x1, y1, x2, y2, true);
    //========
    
    if(those_colliding != noone){
        var check_colliding;
        for(var i = 0 ; i &lt; ds_list_size(those_colliding) ; i++){
            check_colliding = ds_list_find_value(those_colliding, i);
            if(check_colliding.alliance_id != alliance_id){
                apply_damage(check_colliding, damage);
                //apply_knockback(check_colliding);
            }
        }
        ds_list_destroy(those_colliding);
    }
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
