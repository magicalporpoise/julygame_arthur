<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the level

//****
// Based off Heart Beast Tutorial Videos on
//  random level generation
//****

//difficulty based on current level
var difficulty = CURRENT_LEVEL;

var EASY = (difficulty &lt;= (FINAL_LEVEL div 2));
var MEDIUM = ((difficulty &gt; FINAL_LEVEL div 2) and difficulty &lt; FINAL_LEVEL);
var HARD = (difficulty &gt;= FINAL_LEVEL);

// resize room
// 8 is HUGE
// 16 is smaller
var divisor;

if(EASY)divisor = 16;
else if(MEDIUM)divisor = 8;
else divisor = 4;

room_width = (CELL_WIDTH/divisor)*720;
room_height = (CELL_HEIGHT/divisor)*720;

// set grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;

// create the grid
grid = ds_grid_create(width, height);

// fill grid with VOID cells
ds_grid_set_region(grid, 0, 0, width-1, height-1, VOID);

// randomize the seed of the room
randomize();

// create controller
//  the ant that walks around to create the room
var cx = width div 2;
var cy = height div 2;

//create the player at the center
instance_create(cx, cy, obj_player_par);

// give controller a direction
var cdir = irandom(3);

// odds variable for randomness
//  for controller direction
var odds_change_dir = 1;

//CREATE LEVEL with X steps
// 1000 is easy
// 10000 is INSANE
var X;

if(EASY) X = difficulty * 500;
else if(MEDIUM) X = difficulty * 1000;
else if(HARD) X = difficulty * 2000;

//variables for special tiles
//var quarterway = X div 4;
//var midway = X div 2;
//var threequarterway = 3*X div 4;

//FLOORS
for(var i = 0; i &lt; X ; i++) {
    // place a floor tile on controller,
    // and next to it
        grid[# cx, cy] = FLOOR;
        grid[# cx, cy+lengthdir_y(1, irandom(3)*90)] = FLOOR;
        grid[# cx+lengthdir_x(1, irandom(3)*90), cy] = FLOOR;
    
    //randomize controller direction
    if(irandom(odds_change_dir) == odds_change_dir){
        cdir = irandom(3);
    }
    
    //move controller
    cx += lengthdir_x(1, cdir*90);
    cy += lengthdir_y(1, cdir*90);
    
    //clamp the cx and cy to the room bounds
    cx = clamp(cx, 3, width-4);
    cy = clamp(cy, 3, height-4);
}
// EXIT portal
// at the end of the controller path
grid[# cx, cy] = PORTAL;

// make SPECIAL spots
//*******************
// find 3 floors; pick those
//*******************

// WALLS
for(var yy = 1; yy &lt; height-1; yy++){
    for(var xx = 1; xx &lt; width-1; xx++){
        //if there is a floor....
        if(grid[# xx, yy] == FLOOR || grid[# xx, yy] == SPECIAL || grid[# xx, yy] == PORTAL){
            //....check around if there is void....
            //right
            if(grid[# xx+1, yy] == VOID) grid[# xx+1, yy] = WALL;
            //left
            if(grid[# xx-1, yy] == VOID) grid[# xx-1, yy] = WALL;
            //up
            if(grid[# xx, yy-1] == VOID) grid[# xx, yy-1] = WALL;
            //down
            if(grid[# xx, yy+1] == VOID) grid[# xx, yy+1] = WALL;
        }
    }
} //    fill in corners
  //    grid check errors, out of bounds; not fatal, but should fix...
for(var yy = 1; yy &lt; height-1; yy++){
    for(var xx = 1; xx &lt; width-1; xx++){
        if(grid[# xx, yy] == VOID){
            var r = (grid[# xx+1, yy] == WALL);
            var l = (grid[# xx-1, yy] == WALL);
            var d = (grid[# xx, yy-1] == WALL);
            var u = (grid[# xx, yy+1] == WALL);
            var putwall = ((r and d) or (r and u) or (l and d) or (l and u));
            // add walls 
            if(putwall) grid[# xx, yy] = WALL;
        }
    }
}

// PILLARS
for(var yy = 1; yy &lt; height-2; yy++){
    for(var xx = 1; xx &lt; width-2; xx++){
        // check all around, if theyre all floors, make this a floor
        if(grid[# xx, yy] == WALL){
            if(grid[# xx+1, yy] == FLOOR){if(grid[# xx-1, yy] == FLOOR){
            if(grid[# xx, yy-1] == FLOOR){if(grid[# xx, yy+1] == FLOOR){
            grid[# xx, yy] = FLOOR;}}}}
        }
    }
}


// VISUAL REPRESENTATION
//  DRAW THE LEVEL WITH THE GRID
//  CREATE OBJECTS IF NEEDED

// old method
for(var yy = 0; yy &lt; height; yy++){
    for(var xx = 0; xx &lt; width; xx++){
        if(grid[# xx, yy] == VOID){
            //VOID, do nothing, or something?
        }else if(grid[# xx, yy] == FLOOR){
            //draw floor
            tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
        }/*else if(grid[# xx, yy] == WALL){
            //draw wall
             tile_add(bg_wall, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
        }*/else if(grid[# xx, yy] == SPECIAL){
            //draw special
             tile_add(bg_special, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
        }else if(grid[# xx, yy] == PORTAL){
            tile_add(bg_exit, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            //insert portal object
            instance_create(xx*CELL_WIDTH + CELL_WIDTH div 2, yy*CELL_HEIGHT + CELL_HEIGHT div 2, obj_exit_portal);
        }
    }
}

// ADD DRAWING WITH NEW TILE SET
// BASED OFF HEART BEAST CODE
var tw = CELL_WIDTH/2;
var th = CELL_HEIGHT/2;
// Add the tiles
for (var yy = 2; yy &lt; (height-1)*2; yy++) {
    for (var xx = 2; xx &lt; (width-1)*2; xx++) {
        var g = grid[# xx div 2, yy div 2];
        if (g == FLOOR or g == SPECIAL or g == PORTAL) {
            // Get the tile's x and y
            var tx = xx*tw;
            var ty = yy*th;
            
            var right = grid[# (xx+1) div 2, yy div 2] == WALL;
            var left = grid[# (xx-1) div 2, yy div 2] == WALL;
            var top = grid[# xx div 2, (yy-1) div 2] == WALL;
            var bottom = grid[# xx div 2, (yy+1) div 2] == WALL;
            
            var top_right = grid[# (xx+1) div 2, (yy-1) div 2] == WALL;
            var top_left = grid[# (xx-1) div 2, (yy-1) div 2] == WALL;
            var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] == WALL;
            var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] == WALL;
            
            if (right) {
                if (bottom) {
                    tile_add(bg_walltiles, tw*4, th*1, tw, th, tx+tw, ty, -ty);
                } else if (top) {
                    if (top_right) {
                        tile_add(bg_walltiles, tw*4, th*0, tw, th, tx+tw, ty-th, -ty);
                    } else {
                        tile_add(bg_walltiles, tw*3, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                } else {
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                }
            }
            
            if (left) {
                if (bottom) {
                    tile_add(bg_walltiles, tw*3, th*1, tw, th, tx-tw, ty, -ty);
                } else if (top) {
                    if (top_left) {
                        tile_add(bg_walltiles, tw*3, th*0, tw, th, tx-tw, ty-th, -ty);
                    } else {
                        tile_add(bg_walltiles, tw*4, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                } else {
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                }
            }
            
            if (top) {
                if (!top_right) {
                    tile_add(bg_walltiles, tw*2, th*2, tw, th, tx, ty-th, -ty);
                } else if (!top_left) {
                    tile_add(bg_walltiles, tw*0, th*2, tw, th, tx, ty-th, -ty);
                } else {
                    tile_add(bg_walltiles, tw*1, th*0, tw, th, tx, ty-th, -ty);
                }
            }
            
            if (bottom) {
                if (!bottom_right) {
                    tile_add(bg_walltiles, tw*2, th*0, tw, th, tx, ty, -ty-tw);
                } else if (!bottom_left) {
                    tile_add(bg_walltiles, tw*0, th*0, tw, th, tx, ty, -ty-tw);
                } else {
                    tile_add(bg_walltiles, tw*1, th*0, tw, th, tx, ty, -ty-tw);
                }
            }
        }
    }
}


// CREATE OBJECTS FROM GRID
/*for(var yy = 0; yy &lt; height; yy++){
    for(var xx = 0; xx &lt; width; xx++){
    }
}*/


// create view on room
// TESTING PURPOSES

view_xview[1] = 0;
view_yview[1] = 0;
view_wview[1] = room_width;
view_hview[1] = room_height;
view_xport[1] = 0;
view_yport[1] = 0;
view_wport[1] = 960;
view_hport[1] = 720;

view_visible[1] = true;

//player view
// FIGURE IT OUT LATER
// VIEW SHOULD START ON THE EXIT AND THEN PAN TO THE
// PLAYER, ONCE THAT'S SOLVED, WORK ON MAKING IT SO
// NOTHING ELSE MOVES DURING THIS PAN
//*****************************************************
/*
var v_wview = 960/2;
var v_hview = 720/2
var v_xview = cx;
var v_yview = cy;
var v_xport = 0;
var v_yport = 0;
var v_wport = 960;
var v_hport = 720;
var v_object = obj_player_par;
var v_hborder = 400;
var v_vborder = 350;
var v_hspeed = -1;
var v_vspeed = -1;
//set view
room_set_view(room, 0, true, 
              v_xview, v_yview, v_wview, v_hview, 
              v_xport, v_yport, v_wport, v_hport, 
              v_hborder, v_vborder, v_hspeed, v_vspeed, 
              v_object);
*/
//view_xview[view_current] = cx;
//view_yview[view_current] = cy;

//*********************************************************










</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to level up for testing
ds_grid_destroy(grid);
room_goto(level_up_room);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// restart room for testing
ds_grid_destroy(grid);
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
